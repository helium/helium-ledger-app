/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.6-dev */

#ifndef PB_HELIUM_BLOCKCHAIN_TXN_VARS_V1_PB_H_INCLUDED
#define PB_HELIUM_BLOCKCHAIN_TXN_VARS_V1_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _helium_blockchain_var_v1 { 
    pb_callback_t name; 
    pb_callback_t type; 
    pb_callback_t value; 
} helium_blockchain_var_v1;

typedef struct _helium_blockchain_txn_vars_v1 { 
    pb_callback_t vars; 
    uint32_t version_predicate; 
    pb_callback_t proof; 
    pb_callback_t master_key; 
    pb_callback_t key_proof; 
    pb_callback_t cancels; 
    pb_callback_t unsets; 
    uint32_t nonce; 
    pb_callback_t multi_keys; 
    pb_callback_t multi_proofs; 
    pb_callback_t multi_key_proofs; 
} helium_blockchain_txn_vars_v1;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define helium_blockchain_var_v1_init_default    {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define helium_blockchain_txn_vars_v1_init_default {{{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define helium_blockchain_var_v1_init_zero       {{{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define helium_blockchain_txn_vars_v1_init_zero  {{{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}

/* Field tags (for use in manual encoding/decoding) */
#define helium_blockchain_var_v1_name_tag        1
#define helium_blockchain_var_v1_type_tag        2
#define helium_blockchain_var_v1_value_tag       3
#define helium_blockchain_txn_vars_v1_vars_tag   1
#define helium_blockchain_txn_vars_v1_version_predicate_tag 2
#define helium_blockchain_txn_vars_v1_proof_tag  3
#define helium_blockchain_txn_vars_v1_master_key_tag 4
#define helium_blockchain_txn_vars_v1_key_proof_tag 5
#define helium_blockchain_txn_vars_v1_cancels_tag 6
#define helium_blockchain_txn_vars_v1_unsets_tag 7
#define helium_blockchain_txn_vars_v1_nonce_tag  8
#define helium_blockchain_txn_vars_v1_multi_keys_tag 9
#define helium_blockchain_txn_vars_v1_multi_proofs_tag 10
#define helium_blockchain_txn_vars_v1_multi_key_proofs_tag 11

/* Struct field encoding specification for nanopb */
#define helium_blockchain_var_v1_FIELDLIST(X, a) \
X(a, CALLBACK, SINGULAR, STRING,   name,              1) \
X(a, CALLBACK, SINGULAR, STRING,   type,              2) \
X(a, CALLBACK, SINGULAR, BYTES,    value,             3)
#define helium_blockchain_var_v1_CALLBACK pb_default_field_callback
#define helium_blockchain_var_v1_DEFAULT NULL

#define helium_blockchain_txn_vars_v1_FIELDLIST(X, a) \
X(a, CALLBACK, REPEATED, MESSAGE,  vars,              1) \
X(a, STATIC,   SINGULAR, UINT32,   version_predicate,   2) \
X(a, CALLBACK, SINGULAR, BYTES,    proof,             3) \
X(a, CALLBACK, SINGULAR, BYTES,    master_key,        4) \
X(a, CALLBACK, SINGULAR, BYTES,    key_proof,         5) \
X(a, CALLBACK, REPEATED, BYTES,    cancels,           6) \
X(a, CALLBACK, REPEATED, BYTES,    unsets,            7) \
X(a, STATIC,   SINGULAR, UINT32,   nonce,             8) \
X(a, CALLBACK, REPEATED, BYTES,    multi_keys,        9) \
X(a, CALLBACK, REPEATED, BYTES,    multi_proofs,     10) \
X(a, CALLBACK, REPEATED, BYTES,    multi_key_proofs,  11)
#define helium_blockchain_txn_vars_v1_CALLBACK pb_default_field_callback
#define helium_blockchain_txn_vars_v1_DEFAULT NULL
#define helium_blockchain_txn_vars_v1_vars_MSGTYPE helium_blockchain_var_v1

extern const pb_msgdesc_t helium_blockchain_var_v1_msg;
extern const pb_msgdesc_t helium_blockchain_txn_vars_v1_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define helium_blockchain_var_v1_fields &helium_blockchain_var_v1_msg
#define helium_blockchain_txn_vars_v1_fields &helium_blockchain_txn_vars_v1_msg

/* Maximum encoded size of messages (where known) */
/* helium_blockchain_var_v1_size depends on runtime parameters */
/* helium_blockchain_txn_vars_v1_size depends on runtime parameters */

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
